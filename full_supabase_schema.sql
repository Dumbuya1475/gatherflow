
-- Enums
CREATE TYPE public.ticket_status AS ENUM (
    'pending',
    'approved',
    'rejected',
    'expired',
    'unpaid'
);

CREATE TYPE public.field_type AS ENUM (
    'text',
    'number',
    'date',
    'boolean',
    'multiple-choice',
    'checkboxes',
    'dropdown'
);

-- Profiles Table
CREATE TABLE public.profiles (
    id uuid NOT NULL,
    updated_at timestamp with time zone,
    first_name text,
    last_name text,
    avatar_url text,
    is_guest boolean DEFAULT false,
    email text,
    phone text,
    PRIMARY KEY (id),
    UNIQUE (email),
    FOREIGN KEY (id) REFERENCES auth.users (id) ON DELETE CASCADE
);

ALTER TABLE public.profiles ENABLE ROW LEVEL SECURITY;
CREATE POLICY "Public profiles are viewable by everyone." ON public.profiles FOR SELECT USING (true);
CREATE POLICY "Users can insert their own profile." ON public.profiles FOR INSERT WITH CHECK (auth.uid() = id);
CREATE POLICY "Users can update their own profile." ON public.profiles FOR UPDATE USING (auth.uid() = id);


-- Organizations Table
CREATE TABLE public.organizations (
    id uuid PRIMARY KEY DEFAULT gen_random_uuid(),
    created_at timestamp with time zone DEFAULT now() NOT NULL,
    name text NOT NULL,
    description text,
    logo_url text,
    cover_image_url text,
    website text,
    location text,
    owner_id uuid NOT NULL,
    is_verified boolean DEFAULT false,
    UNIQUE(name),
    FOREIGN KEY (owner_id) REFERENCES public.profiles(id) ON DELETE CASCADE
);

ALTER TABLE public.organizations ENABLE ROW LEVEL SECURITY;
CREATE POLICY "Organizations are viewable by everyone" ON public.organizations FOR SELECT USING (true);
CREATE POLICY "Users can create their own organizations" ON public.organizations FOR INSERT WITH CHECK (auth.uid() = owner_id);
CREATE POLICY "Organization owners can update their organizations" ON public.organizations FOR UPDATE USING (auth.uid() = owner_id);
CREATE POLICY "Organization owners can delete their organizations" ON public.organizations FOR DELETE USING (auth.uid() = owner_id);


-- Organization Members Table
CREATE TABLE public.organization_members (
    id uuid PRIMARY KEY DEFAULT gen_random_uuid(),
    created_at timestamp with time zone DEFAULT now() NOT NULL,
    organization_id uuid NOT NULL,
    user_id uuid NOT NULL,
    role text CHECK (role IN ('owner', 'admin', 'member')) DEFAULT 'member',
    UNIQUE(organization_id, user_id),
    FOREIGN KEY (organization_id) REFERENCES public.organizations(id) ON DELETE CASCADE,
    FOREIGN KEY (user_id) REFERENCES public.profiles(id) ON DELETE CASCADE
);

ALTER TABLE public.organization_members ENABLE ROW LEVEL SECURITY;
CREATE POLICY "Organization members are viewable by everyone" ON public.organization_members FOR SELECT USING (true);
CREATE POLICY "Organization owners can add members" ON public.organization_members FOR INSERT WITH CHECK (
    EXISTS (SELECT 1 FROM public.organizations WHERE id = organization_id AND owner_id = auth.uid())
);
CREATE POLICY "Organization owners can update members" ON public.organization_members FOR UPDATE USING (
    EXISTS (SELECT 1 FROM public.organizations WHERE id = organization_id AND owner_id = auth.uid())
);
CREATE POLICY "Organization owners and members themselves can delete membership" ON public.organization_members FOR DELETE USING (
    user_id = auth.uid() OR EXISTS (SELECT 1 FROM public.organizations WHERE id = organization_id AND owner_id = auth.uid())
);


-- Events Table
CREATE TABLE public.events (
    id bigint GENERATED BY DEFAULT AS IDENTITY,
    created_at timestamp with time zone NOT NULL DEFAULT now(),
    title text NOT NULL,
    description text,
    welcome_message text,
    date timestamp with time zone NOT NULL,
    end_date timestamp with time zone,
    location text,
    cover_image text,
    ticket_brand_logo text,
    ticket_brand_color text,
    organizer_id uuid NOT NULL,
    capacity integer,
    is_paid boolean DEFAULT false,
    price double precision,
    is_public boolean DEFAULT true,
    requires_approval boolean DEFAULT false,
    ticket_background_image text,
    fee_bearer text,
    status text,
    payout_completed boolean DEFAULT false NOT NULL,
    category text DEFAULT 'other' CHECK (category IN ('conference', 'workshop', 'festival', 'concert', 'seminar', 'networking', 'sports', 'community', 'other')),
    organization_id uuid,
    event_type text CHECK (event_type IN ('individual', 'organization')) DEFAULT 'individual',
    PRIMARY KEY (id),
    FOREIGN KEY (organizer_id) REFERENCES public.profiles(id),
    FOREIGN KEY (organization_id) REFERENCES public.organizations(id) ON DELETE SET NULL
);

ALTER TABLE public.events ENABLE ROW LEVEL SECURITY;
CREATE POLICY "Events are viewable by everyone." ON public.events FOR SELECT USING (true);
CREATE POLICY "Organizers can create events." ON public.events FOR INSERT WITH CHECK (auth.uid() = organizer_id);
CREATE POLICY "Organizers can update their own events." ON public.events FOR UPDATE USING (auth.uid() = organizer_id);
CREATE POLICY "Organizers can delete their own events." ON public.events FOR DELETE USING (auth.uid() = organizer_id);


-- Tickets Table
CREATE TABLE public.tickets (
    id bigint GENERATED BY DEFAULT AS IDENTITY,
    created_at timestamp with time zone NOT NULL DEFAULT now(),
    event_id bigint NOT NULL,
    user_id uuid NOT NULL,
    qr_token text UNIQUE,
    checked_in boolean DEFAULT false,
    checked_out boolean DEFAULT false,
    checked_in_at timestamp with time zone,
    checked_out_at timestamp with time zone,
    status public.ticket_status,
    monime_checkout_session_id text,
    monime_payment_status text,
    amount_paid real,
    platform_fee real,
    payment_processor_fee real,
    organizer_amount real,
    ticket_price real,
    fee_bearer text,
    PRIMARY KEY (id),
    FOREIGN KEY (event_id) REFERENCES public.events (id) ON DELETE CASCADE,
    FOREIGN KEY (user_id) REFERENCES public.profiles (id) ON DELETE CASCADE
);

ALTER TABLE public.tickets ENABLE ROW LEVEL SECURITY;
CREATE POLICY "Users can view their own tickets." ON public.tickets FOR SELECT USING (auth.uid() = user_id);
CREATE POLICY "Organizers can view tickets for their events." ON public.tickets FOR SELECT USING (
    (SELECT organizer_id FROM public.events WHERE id = tickets.event_id) = auth.uid()
);
CREATE POLICY "Users can create tickets for themselves." ON public.tickets FOR INSERT WITH CHECK (auth.uid() = user_id);
CREATE POLICY "Organizers can update tickets for their events (for check-in/out)." ON public.tickets FOR UPDATE USING (
    (SELECT organizer_id FROM public.events WHERE id = tickets.event_id) = auth.uid()
);


-- Event Scanners Table
CREATE TABLE public.event_scanners (
    id bigint GENERATED BY DEFAULT AS IDENTITY,
    event_id bigint NOT NULL,
    user_id uuid NOT NULL,
    PRIMARY KEY (id),
    FOREIGN KEY (event_id) REFERENCES public.events (id) ON DELETE CASCADE,
    FOREIGN KEY (user_id) REFERENCES public.profiles (id) ON DELETE CASCADE
);

ALTER TABLE public.event_scanners ENABLE ROW LEVEL SECURITY;
CREATE POLICY "Organizers can manage scanners for their events." ON public.event_scanners FOR ALL USING (
    (SELECT organizer_id FROM public.events WHERE id = event_scanners.event_id) = auth.uid()
);
CREATE POLICY "Scanners can view their assignments." ON public.event_scanners FOR SELECT USING (auth.uid() = user_id);

-- Event Form Fields Table
CREATE TABLE public.event_form_fields (
    id bigint GENERATED BY DEFAULT AS IDENTITY,
    event_id bigint NOT NULL,
    field_name text NOT NULL,
    field_type public.field_type NOT NULL,
    is_required boolean DEFAULT false,
    "order" integer,
    PRIMARY KEY (id),
    FOREIGN KEY (event_id) REFERENCES public.events (id) ON DELETE CASCADE
);

ALTER TABLE public.event_form_fields ENABLE ROW LEVEL SECURITY;
CREATE POLICY "Form fields are public." ON public.event_form_fields FOR SELECT USING (true);
CREATE POLICY "Organizers can manage form fields for their events." ON public.event_form_fields FOR ALL USING (
    (SELECT organizer_id FROM public.events WHERE id = event_form_fields.event_id) = auth.uid()
);

-- Event Form Field Options Table
CREATE TABLE public.event_form_field_options (
    id bigint GENERATED BY DEFAULT AS IDENTITY,
    form_field_id bigint NOT NULL,
    value text NOT NULL,
    PRIMARY KEY (id),
    FOREIGN KEY (form_field_id) REFERENCES public.event_form_fields (id) ON DELETE CASCADE
);

ALTER TABLE public.event_form_field_options ENABLE ROW LEVEL SECURITY;
CREATE POLICY "Form field options are public." ON public.event_form_field_options FOR SELECT USING (true);
CREATE POLICY "Organizers can manage options for their event form fields." ON public.event_form_field_options FOR ALL USING (
    (SELECT events.organizer_id FROM public.events
     JOIN public.event_form_fields ON events.id = event_form_fields.event_id
     WHERE event_form_fields.id = event_form_field_options.form_field_id) = auth.uid()
);

-- Attendee Form Responses Table
CREATE TABLE public.attendee_form_responses (
    id bigint GENERATED BY DEFAULT AS IDENTITY,
    ticket_id bigint NOT NULL,
    form_field_id bigint NOT NULL,
    field_value text NOT NULL,
    PRIMARY KEY (id),
    FOREIGN KEY (ticket_id) REFERENCES public.tickets (id) ON DELETE CASCADE,
    FOREIGN KEY (form_field_id) REFERENCES public.event_form_fields (id) ON DELETE CASCADE
);

ALTER TABLE public.attendee_form_responses ENABLE ROW LEVEL SECURITY;
CREATE POLICY "Users can view their own form responses." ON public.attendee_form_responses FOR SELECT USING (
    (SELECT user_id FROM public.tickets WHERE id = attendee_form_responses.ticket_id) = auth.uid()
);
CREATE POLICY "Organizers can view form responses for their events." ON public.attendee_form_responses FOR SELECT USING (
    (SELECT events.organizer_id FROM public.events
     JOIN public.tickets ON events.id = tickets.event_id
     WHERE tickets.id = attendee_form_responses.ticket_id) = auth.uid()
);

-- Payouts Table
CREATE TABLE public.payouts (
    id bigint PRIMARY KEY GENERATED BY DEFAULT AS IDENTITY,
    event_id bigint NOT NULL REFERENCES public.events(id),
    organizer_id uuid NOT NULL REFERENCES public.profiles(id),
    total_tickets_sold integer NOT NULL,
    gross_amount real NOT NULL,
    platform_fees real NOT NULL,
    monime_fees real NOT NULL,
    net_payout real NOT NULL,
    monime_payout_id text,
    monime_payout_status text,
    recipient_phone text,
    created_at timestamp with time zone DEFAULT now() NOT NULL,
    updated_at timestamp with time zone DEFAULT now() NOT NULL
);

ALTER TABLE public.payouts ENABLE ROW LEVEL SECURITY;
CREATE POLICY "Organizers can view their own payouts" ON public.payouts FOR SELECT USING (auth.uid() = organizer_id);


-- Functions
CREATE OR REPLACE FUNCTION public.count_users()
RETURNS integer
LANGUAGE sql
SECURITY DEFINER
AS $$
    SELECT count(*)::integer FROM auth.users;
$$;

CREATE OR REPLACE FUNCTION public.get_event_attendee_counts(event_ids integer[])
RETURNS TABLE(event_id_out integer, attendee_count bigint)
LANGUAGE plpgsql
AS $$
BEGIN
    RETURN QUERY
    SELECT
        e.id,
        COUNT(t.id)
    FROM
        public.events e
    LEFT JOIN
        public.tickets t ON e.id = t.event_id
    WHERE
        e.id = ANY(event_ids)
    GROUP BY
        e.id;
END;
$$;


CREATE OR REPLACE FUNCTION public.get_attendees_for_event(event_id_param integer)
RETURNS TABLE(
    ticket_id bigint,
    checked_in boolean,
    checked_out boolean,
    status public.ticket_status,
    first_name text,
    last_name text,
    email text,
    avatar_url text,
    form_responses json
)
LANGUAGE plpgsql
SECURITY DEFINER
SET search_path = public
AS $$
BEGIN
  IF ((SELECT organizer_id FROM public.events WHERE id = event_id_param) = auth.uid()) THEN
    RETURN QUERY
    SELECT
        t.id AS ticket_id,
        t.checked_in,
        t.checked_out,
        t.status,
        p.first_name,
        p.last_name,
        p.email,
        p.avatar_url,
        (SELECT json_agg(json_build_object('field_name', f.field_name, 'field_value', r.field_value))
         FROM attendee_form_responses r
         JOIN event_form_fields f ON r.form_field_id = f.id
         WHERE r.ticket_id = t.id)
    FROM
        public.tickets t
    JOIN
        public.profiles p ON t.user_id = p.id
    WHERE
        t.event_id = event_id_param;
  END IF;
END;
$$;

-- Followers Table
CREATE TABLE public.followers (
    id uuid PRIMARY KEY DEFAULT gen_random_uuid(),
    created_at timestamp with time zone DEFAULT now() NOT NULL,
    follower_id uuid NOT NULL,
    following_user_id uuid,
    following_organization_id uuid,
    CHECK (
        (following_user_id IS NOT NULL AND following_organization_id IS NULL) OR
        (following_user_id IS NULL AND following_organization_id IS NOT NULL)
    ),
    UNIQUE(follower_id, following_user_id),
    UNIQUE(follower_id, following_organization_id),
    FOREIGN KEY (follower_id) REFERENCES public.profiles(id) ON DELETE CASCADE,
    FOREIGN KEY (following_user_id) REFERENCES public.profiles(id) ON DELETE CASCADE,
    FOREIGN KEY (following_organization_id) REFERENCES public.organizations(id) ON DELETE CASCADE
);

ALTER TABLE public.followers ENABLE ROW LEVEL SECURITY;
CREATE POLICY "Followers are viewable by everyone" ON public.followers FOR SELECT USING (true);
CREATE POLICY "Users can follow others" ON public.followers FOR INSERT WITH CHECK (auth.uid() = follower_id);
CREATE POLICY "Users can unfollow" ON public.followers FOR DELETE USING (auth.uid() = follower_id);

-- Storage Policies
-- Bucket: event-covers
INSERT INTO storage.buckets (id, name, public, file_size_limit, allowed_mime_types)
VALUES ('event-covers', 'event-covers', true, 5242880, ARRAY['image/jpeg', 'image/png', 'image/webp'])
ON CONFLICT (id) DO NOTHING;

CREATE POLICY "Event cover images are publicly accessible."
ON storage.objects FOR SELECT
TO anon, authenticated
USING (bucket_id = 'event-covers');

CREATE POLICY "Authenticated users can upload event cover images."
ON storage.objects FOR INSERT
TO authenticated
WITH CHECK (bucket_id = 'event-covers');

CREATE POLICY "Organizers can delete their own event cover images."
ON storage.objects FOR DELETE
TO authenticated
USING (
  bucket_id = 'event-covers' AND
  (SELECT organizer_id FROM public.events WHERE cover_image LIKE '%' || name) = auth.uid()
);


-- Bucket: event-images
INSERT INTO storage.buckets (id, name, public, file_size_limit, allowed_mime_types)
VALUES ('event-images', 'event-images', true, 5242880, ARRAY['image/jpeg', 'image/png', 'image/webp'])
ON CONFLICT (id) DO NOTHING;

CREATE POLICY "Event images are publicly accessible."
ON storage.objects FOR SELECT
TO anon, authenticated
USING (bucket_id = 'event-images');

CREATE POLICY "Authenticated users can upload event images."
ON storage.objects FOR INSERT
TO authenticated
WITH CHECK (bucket_id = 'event-images');

CREATE POLICY "Organizers can delete their own event images."
ON storage.objects FOR DELETE
TO authenticated
USING (
  bucket_id = 'event-images' AND
  (SELECT organizer_id FROM public.events WHERE ticket_brand_logo LIKE '%' || name OR ticket_background_image LIKE '%' || name) = auth.uid()
);
