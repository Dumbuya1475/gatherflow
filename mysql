I have run multiple sql code for my project

is it possible to turn it into one or break them 

do you want to put them in a file so i can just copy them and run them ?

I will provide the codes i will use ------------------ to seperate them

-- 1. Create Profiles Table

-- This table stores public user data.

CREATE TABLE public.profiles (

    id uuid NOT NULL PRIMARY KEY REFERENCES auth.users(id) ON DELETE CASCADE,

    first_name text,

    last_name text,

    avatar_url text,

    email text UNIQUE

);

ALTER TABLE public.profiles ENABLE ROW LEVEL SECURITY;

CREATE POLICY "Public profiles are viewable by everyone." ON public.profiles FOR SELECT USING (true);

CREATE POLICY "Users can insert their own profile." ON public.profiles FOR INSERT WITH CHECK (auth.uid() = id);

CREATE POLICY "Users can update their own profile." ON public.profiles FOR UPDATE USING (auth.uid() = id);

-- 2. Create Events Table

-- This table stores all event information.

CREATE TABLE public.events (

    id bigint GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,

    created_at timestamp with time zone DEFAULT now(),

    title text NOT NULL,

    description text,

    date timestamp with time zone NOT NULL,

    end_date timestamp with time zone,

    location text,

    cover_image text,

    organizer_id uuid REFERENCES public.profiles(id) ON DELETE SET NULL,

    capacity integer,

    is_paid boolean DEFAULT false,

    price numeric,

    is_public boolean DEFAULT true NOT NULL

);

ALTER TABLE public.events ENABLE ROW LEVEL SECURITY;

CREATE POLICY "Public events are viewable by everyone." ON public.events FOR SELECT USING (is_public = true);

CREATE POLICY "Organizers can view their own private events." ON public.events FOR SELECT USING (auth.uid() = organizer_id);

CREATE POLICY "Organizers can insert events." ON public.events FOR INSERT WITH CHECK (auth.uid() = organizer_id);

CREATE POLICY "Organizers can update their own events." ON public.events FOR UPDATE USING (auth.uid() = organizer_id);

CREATE POLICY "Organizers can delete their own events." ON public.events FOR DELETE USING (auth.uid() = organizer_id);

-- 3. Create Tickets Table

-- This table links users (attendees) to events.

CREATE TABLE public.tickets (

    id bigint GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,

    created_at timestamp with time zone DEFAULT now(),

    event_id bigint REFERENCES public.events(id) ON DELETE CASCADE,

    user_id uuid REFERENCES public.profiles(id) ON DELETE CASCADE,

    qr_token uuid DEFAULT gen_random_uuid() NOT NULL UNIQUE,

    checked_in boolean DEFAULT false NOT NULL,

    checked_in_at timestamp with time zone,

    checked_out boolean DEFAULT false NOT NULL,

    checked_out_at timestamp with time zone,

    UNIQUE(event_id, user_id)

);

ALTER TABLE public.tickets ENABLE ROW LEVEL SECURITY;

CREATE POLICY "Users can view their own tickets." ON public.tickets FOR SELECT USING (auth.uid() = user_id);

CREATE POLICY "Organizers can view tickets for their events." ON public.tickets FOR SELECT USING (

    (SELECT organizer_id FROM public.events WHERE id = event_id) = auth.uid()

);

CREATE POLICY "Users can create their own tickets." ON public.tickets FOR INSERT WITH CHECK (auth.uid() = user_id);

CREATE POLICY "Users can delete their own tickets (unregister)." ON public.tickets FOR DELETE USING (auth.uid() = user_id);

CREATE POLICY "Organizers can update tickets for their events (check-in)." ON public.tickets FOR UPDATE USING (

    (SELECT organizer_id FROM public.events WHERE id = event_id) = auth.uid()

);

-- 4. Create Event Scanners Table

-- This table links users to events they are allowed to scan.

CREATE TABLE public.event_scanners (

    id bigint GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,

    event_id bigint NOT NULL REFERENCES public.events(id) ON DELETE CASCADE,

    user_id uuid NOT NULL REFERENCES public.profiles(id) ON DELETE CASCADE,

    UNIQUE(event_id, user_id)

);

ALTER TABLE public.event_scanners ENABLE ROW LEVEL SECURITY;

CREATE POLICY "Organizers can manage scanners for their events." ON public.event_scanners FOR ALL USING (

    (SELECT organizer_id FROM public.events WHERE id = event_id) = auth.uid()

);

CREATE POLICY "Scanners can view their own assignments." ON public.event_scanners FOR SELECT USING (auth.uid() = user_id);

-- 5. Create Database Functions

-- Function to populate the profiles table on new user signup

CREATE OR REPLACE FUNCTION public.handle_new_user()

RETURNS trigger

LANGUAGE plpgsql

SECURITY DEFINER SET search_path = public

AS $$

BEGIN

  INSERT INTO public.profiles (id, first_name, last_name, email)

  VALUES (

    new.id,

    new.raw_user_meta_data->>'first_name',

    new.raw_user_meta_data->>'last_name',

    new.email

  );

  RETURN new;

END;

$$;

-- Trigger to call the function on new user signup

CREATE TRIGGER on_auth_user_created

  AFTER INSERT ON auth.users

  FOR EACH ROW EXECUTE PROCEDURE public.handle_new_user();

-- Function to securely get event attendees for an organizer

CREATE OR REPLACE FUNCTION public.get_attendees_for_event(event_id_param int)

RETURNS TABLE(ticket_id bigint, checked_in bool, checked_out bool, first_name text, last_name text, email text)

LANGUAGE plpgsql

SECURITY DEFINER SET search_path = public

AS $$

BEGIN

  IF (

    (SELECT organizer_id FROM public.events WHERE id = event_id_param) = auth.uid()

  ) THEN

    RETURN QUERY

    SELECT t.id, t.checked_in, t.checked_out, p.first_name, p.last_name, p.email

    FROM public.tickets t

    JOIN public.profiles p ON t.user_id = p.id

    WHERE t.event_id = event_id_param;

  END IF;

END;

$$;

-- Function to count total registered users

CREATE OR REPLACE FUNCTION public.count_users()

RETURNS int

LANGUAGE plpgsql

AS $$

BEGIN

  RETURN (SELECT count(*) FROM auth.users);

END;

$$;

------------------------

DROP POLICY IF EXISTS "Scanners can update tickets for their assigned events." ON public.tickets;

CREATE POLICY "Organizers or scanners can view tickets."

ON public.tickets

FOR SELECT USING (

  auth.uid() = (SELECT organizer_id FROM public.events e WHERE e.id = tickets.event_id LIMIT 1)

  OR EXISTS (

    SELECT 1 FROM public.event_scanners es

    WHERE es.event_id = tickets.event_id

    AND es.user_id = auth.uid()

  )

);

--------------

-- 1️⃣ Drop old tickets policies (to avoid conflicts)

DROP POLICY IF EXISTS "Users can view their own tickets." ON public.tickets;

DROP POLICY IF EXISTS "Organizers can view tickets for their events." ON public.tickets;

DROP POLICY IF EXISTS "Organizers can update tickets for their events (check-in)." ON public.tickets;

-- 2️⃣ Create SELECT policy for tickets (viewing)

CREATE POLICY "Organizers or scanners can view tickets"

ON public.tickets

FOR SELECT

USING (

    auth.uid() = (SELECT organizer_id FROM public.events e WHERE e.id = tickets.event_id LIMIT 1)

    OR EXISTS (

        SELECT 1 FROM public.event_scanners es

        WHERE es.event_id = tickets.event_id

        AND es.user_id = auth.uid()

    )

    OR auth.uid() = user_id  -- attendee can view their own ticket

);

-- 3️⃣ Create UPDATE policy for tickets (checking in)

CREATE POLICY "Organizers or scanners can update tickets"

ON public.tickets

FOR UPDATE

USING (

    auth.uid() = (SELECT organizer_id FROM public.events e WHERE e.id = tickets.event_id LIMIT 1)

    OR EXISTS (

        SELECT 1 FROM public.event_scanners es

        WHERE es.event_id = tickets.event_id

        AND es.user_id = auth.uid()

    )

);

-- 4️⃣ Optional: DELETE policy for attendees

-- Keeps your previous policy (attendee can unregister themselves)

DROP POLICY IF EXISTS "Users can delete their own tickets (unregister)" ON public.tickets;

CREATE POLICY "Users can delete their own tickets (unregister)"

ON public.tickets

FOR DELETE

USING (auth.uid() = user_id);

-------------------------

alter table public.events

add column requires_approval boolean not null default false;

----------------------------

CREATE TYPE public.ticket_status AS ENUM ('pending', 'approved',

     'rejected');

-------------------------

alter table public.tickets

add column status public.ticket_status not null default 'pending';

----------------------------

-- 1. Create the ENUM type for form field types
create type public.field_type as ENUM('text', 'number', 'date', 'boolean');

-- 2. Create the table to store the custom questions for each event
create table public.event_form_fields (
  id bigint generated by default as identity primary key,
  event_id bigint not null references public.events (id) on delete CASCADE,
  field_name text not null,
  field_type public.field_type not null,
  is_required boolean not null default false,
  "order" int not null
);

alter table public.event_form_fields ENABLE row LEVEL SECURITY;

create policy "Public can view form fields for any event." on public.event_form_fields for
select
  using (true);

create policy "Organizers can manage form fields for their events." on public.event_form_fields for all using (
  (
    select
      organizer_id
    from
      public.events
    where
      id = event_id
  ) = auth.uid ()
);

-- 3. Create the table to store attendee responses
create table public.attendee_form_responses (
  id bigint generated by default as identity primary key,
  ticket_id bigint not null references public.tickets (id) on delete CASCADE,
  form_field_id bigint not null references public.event_form_fields (id) on delete CASCADE,
  field_value text not null
);

alter table public.attendee_form_responses ENABLE row LEVEL SECURITY;

create policy "Users can view their own form responses." on public.attendee_form_responses for
select
  using (
    (
      select
        user_id
      from
        public.tickets
      where
        id = ticket_id
    ) = auth.uid ()
  );

create policy "Organizers can view form responses for their events." on public.attendee_form_responses for
select
  using (
    (
      select
        organizer_id
      from
        public.events
      where
        id = (
          select
            event_id
          from
            public.tickets
          where
            id = ticket_id
        )
    ) = auth.uid ()
  );

create policy "Users can insert their own form responses." on public.attendee_form_responses for INSERT
with
  check (
    (
      select
        user_id
      from
        public.tickets
      where
        id = ticket_id
    ) = auth.uid ()
  );

-------------------------------

-- 1. Create the ENUM type for form field types
create type public.field_type as ENUM('text', 'number', 'date', 'boolean');

-- 2. Create the table to store the custom questions for each event
create table public.event_form_fields (
  id bigint generated by default as identity primary key,
  event_id bigint not null references public.events (id) on delete CASCADE,
  field_name text not null,
  field_type public.field_type not null,
  is_required boolean not null default false,
  "order" int not null
);

alter table public.event_form_fields ENABLE row LEVEL SECURITY;

create policy "Public can view form fields for any event." on public.event_form_fields for
select
  using (true);

create policy "Organizers can manage form fields for their events." on public.event_form_fields for all using (
  (
    select
      organizer_id
    from
      public.events
    where
      id = event_id
  ) = auth.uid ()
);

-- 3. Create the table to store attendee responses
create table public.attendee_form_responses (
  id bigint generated by default as identity primary key,
  ticket_id bigint not null references public.tickets (id) on delete CASCADE,
  form_field_id bigint not null references public.event_form_fields (id) on delete CASCADE,
  field_value text not null
);

alter table public.attendee_form_responses ENABLE row LEVEL SECURITY;

create policy "Users can view their own form responses." on public.attendee_form_responses for
select
  using (
    (
      select
        user_id
      from
        public.tickets
      where
        id = ticket_id
    ) = auth.uid ()
  );

create policy "Organizers can view form responses for their events." on public.attendee_form_responses for
select
  using (
    (
      select
        organizer_id
      from
        public.events
      where
        id = (
          select
            event_id
          from
            public.tickets
          where
            id = ticket_id
        )
    ) = auth.uid ()
  );

create policy "Users can insert their own form responses." on public.attendee_form_responses for INSERT
with
  check (
    (
      select
        user_id
      from
        public.tickets
      where
        id = ticket_id
    ) = auth.uid ()
  );

---------------------------------

-- Create a table for public profiles
create table profiles (
  id uuid references auth.users on delete cascade not null primary key,
  updated_at timestamp with time zone,
  username text unique,
  full_name text,
  avatar_url text,
  website text,

  constraint username_length check (char_length(username) >= 3)
);
-- Set up Row Level Security (RLS)
-- See https://supabase.com/docs/guides/auth/row-level-security for more details.
alter table profiles
  enable row level security;

create policy "Public profiles are viewable by everyone." on profiles
  for select using (true);

create policy "Users can insert their own profile." on profiles
  for insert with check ((select auth.uid()) = id);

create policy "Users can update own profile." on profiles
  for update using ((select auth.uid()) = id);

-- This trigger automatically creates a profile entry when a new user signs up via Supabase Auth.
-- See https://supabase.com/docs/guides/auth/managing-user-data#using-triggers for more details.
create function public.handle_new_user()
returns trigger
set search_path = ''
as $$
begin
  insert into public.profiles (id, full_name, avatar_url)
  values (new.id, new.raw_user_meta_data->>'full_name', new.raw_user_meta_data->>'avatar_url');
  return new;
end;
$$ language plpgsql security definer;
create trigger on_auth_user_created
  after insert on auth.users
  for each row execute procedure public.handle_new_user();

-- Set up Storage!
insert into storage.buckets (id, name)
  values ('avatars', 'avatars');

-- Set up access controls for storage.
-- See https://supabase.com/docs/guides/storage#policy-examples for more details.
create policy "Avatar images are publicly accessible." on storage.objects
  for select using (bucket_id = 'avatars');

create policy "Anyone can upload an avatar." on storage.objects
  for insert with check (bucket_id = 'avatars');

----------------------------------

-- STORAGE BUCKET SETUP
-- Run this first to create the correct storage buckets

-- Create event-covers bucket (your code tries to upload to 'event-images' but bucket doesn't exist)
INSERT INTO storage.buckets (id, name, public, file_size_limit, allowed_mime_types)
VALUES (
    'event-covers', 
    'event-covers', 
    true, 
    5242880, -- 5MB
    ARRAY['image/jpeg', 'image/jpg', 'image/png', 'image/webp', 'image/gif']
) ON CONFLICT (id) DO UPDATE SET
    public = EXCLUDED.public,
    file_size_limit = EXCLUDED.file_size_limit,
    allowed_mime_types = EXCLUDED.allowed_mime_types;

-- Also create event-images bucket since your code references it
INSERT INTO storage.buckets (id, name, public, file_size_limit, allowed_mime_types)
VALUES (
    'event-images', 
    'event-images', 
    true, 
    5242880, -- 5MB
    ARRAY['image/jpeg', 'image/jpg', 'image/png', 'image/webp', 'image/gif']
) ON CONFLICT (id) DO UPDATE SET
    public = EXCLUDED.public,
    file_size_limit = EXCLUDED.file_size_limit,
    allowed_mime_types = EXCLUDED.allowed_mime_types;

-- Storage policies for event covers
DROP POLICY IF EXISTS "Event cover images are publicly accessible" ON storage.objects;
DROP POLICY IF EXISTS "Authenticated users can upload event covers" ON storage.objects;
DROP POLICY IF EXISTS "Authenticated users can upload event images" ON storage.objects;

CREATE POLICY "Event images are publicly accessible" 
ON storage.objects FOR SELECT 
USING (bucket_id IN ('event-covers', 'event-images'));

CREATE POLICY "Authenticated users can upload event images" 
ON storage.objects FOR INSERT 
WITH CHECK (
    bucket_id IN ('event-covers', 'event-images') 
    AND auth.role() = 'authenticated'
);

CREATE POLICY "Users can manage event images" 
ON storage.objects FOR UPDATE 
USING (
    bucket_id IN ('event-covers', 'event-images') 
    AND auth.role() = 'authenticated'
);

CREATE POLICY "Users can delete event images" 
ON storage.objects FOR DELETE 
USING (
    bucket_id IN ('event-covers', 'event-images') 
    AND auth.role() = 'authenticated'
);

-----------------------------

-- Create a table for public profiles
create table profiles (
  id uuid references auth.users on delete cascade not null primary key,
  updated_at timestamp with time zone,
  username text unique,
  full_name text,
  avatar_url text,
  website text,

  constraint username_length check (char_length(username) >= 3)
);
-- Set up Row Level Security (RLS)
-- See https://supabase.com/docs/guides/auth/row-level-security for more details.
alter table profiles
  enable row level security;

create policy "Public profiles are viewable by everyone." on profiles
  for select using (true);

create policy "Users can insert their own profile." on profiles
  for insert with check ((select auth.uid()) = id);

create policy "Users can update own profile." on profiles
  for update using ((select auth.uid()) = id);

-- This trigger automatically creates a profile entry when a new user signs up via Supabase Auth.
-- See https://supabase.com/docs/guides/auth/managing-user-data#using-triggers for more details.
create function public.handle_new_user()
returns trigger
set search_path = ''
as $$
begin
  insert into public.profiles (id, full_name, avatar_url)
  values (new.id, new.raw_user_meta_data->>'full_name', new.raw_user_meta_data->>'avatar_url');
  return new;
end;
$$ language plpgsql security definer;
create trigger on_auth_user_created
  after insert on auth.users
  for each row execute procedure public.handle_new_user();

-- Set up Storage!
insert into storage.buckets (id, name)
  values ('avatars', 'avatars');

-- Set up access controls for storage.
-- See https://supabase.com/docs/guides/storage#policy-examples for more details.
create policy "Avatar images are publicly accessible." on storage.objects
  for select using (bucket_id = 'avatars');

create policy "Anyone can upload an avatar." on storage.objects
  for insert with check (bucket_id = 'avatars');

-------------------------------------

