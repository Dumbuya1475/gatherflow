-- =====================================================
-- GATHERFLOW - MASTER DATABASE SCHEMA
-- Version: 1.1
-- Description: This script sets up the entire database,
-- including tables, types, functions, and RLS policies.
-- Run this on a fresh, empty Supabase project.
-- =====================================================

-- 1. EXTENSIONS
-- =====================================================
-- (No extensions needed for this setup)

-- 2. CREATE CUSTOM TYPES
-- =====================================================
CREATE TYPE public.ticket_status AS ENUM (
    'pending',
    'approved',
    'rejected',
    'checked_in',
    'checked_out',
    'expired'
);

CREATE TYPE public.field_type AS ENUM (
    'text',
    'number',
    'date',
    'boolean',
    'multiple-choice',
    'checkboxes',
    'dropdown'
);

-- =====================================================
-- 3. CREATE CORE TABLES
-- =====================================================

-- Profiles Table (linked to auth.users)
CREATE TABLE public.profiles (
    id uuid NOT NULL PRIMARY KEY REFERENCES auth.users(id) ON DELETE CASCADE,
    created_at timestamp with time zone NOT NULL DEFAULT now(),
    updated_at timestamp with time zone,
    first_name text,
    last_name text,
    avatar_url text,
    is_guest boolean DEFAULT false,
    email text UNIQUE,
    phone text
);

-- Events Table
CREATE TABLE public.events (
    id bigint GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    created_at timestamp with time zone NOT NULL DEFAULT now(),
    title text NOT NULL,
    description text,
    welcome_message text,
    date timestamp with time zone NOT NULL,
    end_date timestamp with time zone,
    location text,
    cover_image text,
    ticket_brand_logo text,
    ticket_brand_color text,
    organizer_id uuid NOT NULL REFERENCES public.profiles(id) ON DELETE CASCADE,
    capacity integer,
    is_paid boolean DEFAULT false NOT NULL,
    price double precision,
    is_public boolean DEFAULT true NOT NULL,
    requires_approval boolean DEFAULT false NOT NULL,
    ticket_background_image text,
    fee_bearer text DEFAULT 'buyer'::text,
    status text DEFAULT 'draft'::text,
    payout_completed boolean DEFAULT false NOT NULL
);

-- Tickets Table
CREATE TABLE public.tickets (
    id bigint GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    created_at timestamp with time zone NOT NULL DEFAULT now(),
    event_id bigint NOT NULL REFERENCES public.events(id) ON DELETE CASCADE,
    user_id uuid NOT NULL REFERENCES public.profiles(id) ON DELETE CASCADE,
    qr_token text UNIQUE,
    checked_in boolean DEFAULT false,
    checked_out boolean DEFAULT false,
    checked_in_at timestamp with time zone,
    checked_out_at timestamp with time zone,
    status public.ticket_status DEFAULT 'pending'::public.ticket_status NOT NULL,
    ticket_price double precision,
    monime_checkout_session_id text,
    monime_payment_status text,
    fee_bearer text,
    UNIQUE(event_id, user_id)
);

-- Event Scanners Table
CREATE TABLE public.event_scanners (
    id bigint GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    event_id bigint NOT NULL REFERENCES public.events(id) ON DELETE CASCADE,
    user_id uuid NOT NULL REFERENCES public.profiles(id) ON DELETE CASCADE,
    UNIQUE(event_id, user_id)
);

-- Event Form Fields Table
CREATE TABLE public.event_form_fields (
    id bigint GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    event_id bigint NOT NULL REFERENCES public.events(id) ON DELETE CASCADE,
    field_name text NOT NULL,
    field_type public.field_type NOT NULL,
    is_required boolean DEFAULT false NOT NULL,
    "order" integer
);

-- Event Form Field Options Table
CREATE TABLE public.event_form_field_options (
    id bigint GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    form_field_id bigint NOT NULL REFERENCES public.event_form_fields(id) ON DELETE CASCADE,
    value text NOT NULL
);

-- Attendee Form Responses Table
CREATE TABLE public.attendee_form_responses (
    id bigint GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    ticket_id bigint NOT NULL REFERENCES public.tickets(id) ON DELETE CASCADE,
    form_field_id bigint NOT NULL REFERENCES public.event_form_fields(id) ON DELETE CASCADE,
    field_value text NOT NULL
);

-- Payouts Table
CREATE TABLE public.payouts (
    id bigint GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    created_at timestamp with time zone DEFAULT now() NOT NULL,
    event_id bigint NOT NULL REFERENCES public.events(id) ON DELETE CASCADE,
    organizer_id uuid NOT NULL REFERENCES public.profiles(id) ON DELETE CASCADE,
    total_tickets_sold integer,
    gross_amount double precision,
    platform_fees double precision,
    monime_fees double precision,
    net_payout double precision,
    monime_payout_id text,
    recipient_phone text,
    monime_payout_status text
);


-- =====================================================
-- 4. ENABLE ROW LEVEL SECURITY
-- =====================================================

ALTER TABLE public.profiles ENABLE ROW LEVEL SECURITY;
ALTER TABLE public.events ENABLE ROW LEVEL SECURITY;
ALTER TABLE public.tickets ENABLE ROW LEVEL SECURITY;
ALTER TABLE public.event_scanners ENABLE ROW LEVEL SECURITY;
ALTER TABLE public.event_form_fields ENABLE ROW LEVEL SECURITY;
ALTER TABLE public.event_form_field_options ENABLE ROW LEVEL SECURITY;
ALTER TABLE public.attendee_form_responses ENABLE ROW LEVEL SECURITY;
ALTER TABLE public.payouts ENABLE ROW LEVEL SECURITY;


-- =====================================================
-- 5. CREATE SECURITY POLICIES
-- =====================================================

-- Profiles Policies
CREATE POLICY "Public profiles are viewable by everyone." ON public.profiles FOR SELECT USING (true);
CREATE POLICY "Users can insert their own profile." ON public.profiles FOR INSERT WITH CHECK (auth.uid() = id);
CREATE POLICY "Users can update their own profile." ON public.profiles FOR UPDATE USING (auth.uid() = id);

-- Events Policies
CREATE POLICY "Events are viewable by everyone." ON public.events FOR SELECT USING (true);
CREATE POLICY "Organizers can create events." ON public.events FOR INSERT WITH CHECK (auth.uid() = organizer_id);
CREATE POLICY "Organizers can update their own events." ON public.events FOR UPDATE USING (auth.uid() = organizer_id);
CREATE POLICY "Organizers can delete their own events." ON public.events FOR DELETE USING (auth.uid() = organizer_id);

-- Tickets Policies
CREATE POLICY "Users can view their own tickets." ON public.tickets FOR SELECT USING (auth.uid() = user_id);
CREATE POLICY "Organizers can view tickets for their events." ON public.tickets FOR SELECT USING ((SELECT organizer_id FROM public.events WHERE id = tickets.event_id) = auth.uid());
CREATE POLICY "Users can create their own tickets." ON public.tickets FOR INSERT WITH CHECK (auth.uid() = user_id);
CREATE POLICY "Organizers can update tickets for their events." ON public.tickets FOR UPDATE USING ((SELECT organizer_id FROM public.events WHERE id = tickets.event_id) = auth.uid());

-- Event Scanners Policies
CREATE POLICY "Organizers can manage scanners for their events." ON public.event_scanners FOR ALL USING ((SELECT organizer_id FROM public.events WHERE id = event_scanners.event_id) = auth.uid());
CREATE POLICY "Scanners can view their assigned events." ON public.event_scanners FOR SELECT USING (auth.uid() = user_id);

-- Form Field Policies
CREATE POLICY "Form fields are public." ON public.event_form_fields FOR SELECT USING (true);
CREATE POLICY "Organizers can manage form fields." ON public.event_form_fields FOR ALL USING ((SELECT organizer_id FROM public.events WHERE id = event_form_fields.event_id) = auth.uid());

-- Form Field Options Policies
CREATE POLICY "Form field options are public." ON public.event_form_field_options FOR SELECT USING (true);
CREATE POLICY "Organizers can manage form field options." ON public.event_form_field_options FOR ALL USING ((SELECT events.organizer_id FROM public.events JOIN public.event_form_fields ON events.id = event_form_fields.event_id WHERE event_form_fields.id = form_field_id) = auth.uid());

-- Form Responses Policies
CREATE POLICY "Users can view their own form responses." ON public.attendee_form_responses FOR SELECT USING ((SELECT user_id FROM public.tickets WHERE id = ticket_id) = auth.uid());
CREATE POLICY "Organizers can view form responses for their events." ON public.attendee_form_responses FOR SELECT USING ((SELECT events.organizer_id FROM public.events JOIN public.tickets ON events.id = tickets.event_id WHERE tickets.id = attendee_form_responses.ticket_id) = auth.uid());

-- Payouts Policies
CREATE POLICY "Organizers can view their own payouts" ON public.payouts FOR SELECT USING (auth.uid() = organizer_id);


-- =====================================================
-- 6. CREATE FUNCTIONS AND TRIGGERS
-- =====================================================

-- Function to create a profile for a new user.
CREATE OR REPLACE FUNCTION public.handle_new_user()
RETURNS TRIGGER
LANGUAGE plpgsql
SECURITY DEFINER
AS $$
BEGIN
  INSERT INTO public.profiles (id, email, first_name, last_name, avatar_url)
  VALUES (
    new.id,
    new.email,
    new.raw_user_meta_data->>'first_name',
    new.raw_user_meta_data->>'last_name',
    new.raw_user_meta_data->>'avatar_url'
  );
  RETURN new;
END;
$$;

-- Trigger for new users
CREATE TRIGGER on_auth_user_created
  AFTER INSERT ON auth.users
  FOR EACH ROW EXECUTE PROCEDURE public.handle_new_user();

-- Function to securely get event attendees for an organizer
CREATE OR REPLACE FUNCTION public.get_attendees_for_event(event_id_param integer)
RETURNS TABLE(ticket_id bigint, checked_in boolean, checked_out boolean, status public.ticket_status, first_name text, last_name text, email text, avatar_url text, form_responses json)
LANGUAGE plpgsql
SECURITY DEFINER SET search_path = public
AS $$
BEGIN
  IF ((SELECT organizer_id FROM public.events WHERE id = event_id_param) = auth.uid()) THEN
    RETURN QUERY
    SELECT
        t.id,
        t.checked_in,
        t.checked_out,
        t.status,
        p.first_name,
        p.last_name,
        p.email,
        p.avatar_url,
        (SELECT json_agg(json_build_object('field_name', f.field_name, 'field_value', fr.field_value)) FROM attendee_form_responses fr JOIN event_form_fields f ON fr.form_field_id = f.id WHERE fr.ticket_id = t.id)
    FROM
        public.tickets t
    JOIN
        public.profiles p ON t.user_id = p.id
    WHERE
        t.event_id = event_id_param;
  END IF;
END;
$$;

-- Function to count total users
CREATE OR REPLACE FUNCTION public.count_users()
RETURNS integer
LANGUAGE plpgsql
AS $$
BEGIN
  RETURN (SELECT COUNT(*) FROM auth.users);
END;
$$;

-- Function to get attendee counts for multiple events
CREATE OR REPLACE FUNCTION public.get_event_attendee_counts(event_ids integer[])
RETURNS TABLE(event_id_out integer, attendee_count bigint)
LANGUAGE plpgsql
AS $$
BEGIN
  RETURN QUERY
  SELECT
    e.id,
    count(t.id)
  FROM
    public.events e
  LEFT JOIN
    public.tickets t ON e.id = t.event_id
  WHERE
    e.id = ANY(event_ids)
  GROUP BY
    e.id;
END;
$$;


-- =====================================================
-- 7. CREATE STORAGE BUCKETS AND POLICIES
-- =====================================================

-- Create storage buckets
INSERT INTO storage.buckets (id, name, public, file_size_limit, allowed_mime_types)
VALUES ('event-covers', 'event-covers', true, 5242880, ARRAY['image/jpeg', 'image/png', 'image/webp']);

INSERT INTO storage.buckets (id, name, public, file_size_limit, allowed_mime_types)
VALUES ('event-images', 'event-images', true, 5242880, ARRAY['image/jpeg', 'image/png', 'image/webp']);

-- Storage Policies for 'event-covers'
CREATE POLICY "Event cover images are publicly accessible." ON storage.objects FOR SELECT USING (bucket_id = 'event-covers');
CREATE POLICY "Authenticated users can upload event covers." ON storage.objects FOR INSERT TO authenticated WITH CHECK (bucket_id = 'event-covers');
CREATE POLICY "Organizers can delete their own event covers." ON storage.objects FOR DELETE TO authenticated USING (bucket_id = 'event-covers' AND owner = auth.uid());
CREATE POLICY "Organizers can update their own event covers." ON storage.objects FOR UPDATE TO authenticated USING (bucket_id = 'event-covers' AND owner = auth.uid());


-- Storage Policies for 'event-images'
CREATE POLICY "Event images are publicly accessible." ON storage.objects FOR SELECT USING (bucket_id = 'event-images');
CREATE POLICY "Authenticated users can upload event images." ON storage.objects FOR INSERT TO authenticated WITH CHECK (bucket_id = 'event-images');
CREATE POLICY "Organizers can update their own event images." ON storage.objects FOR UPDATE TO authenticated USING (bucket_id = 'event-images' AND owner = auth.uid());
CREATE POLICY "Organizers can delete their own event images." ON storage.objects FOR DELETE TO authenticated USING (bucket_id = 'event-images' AND owner = auth.uid());


-- =====================================================
-- 8. CREATE PERFORMANCE INDEXES
-- =====================================================

CREATE INDEX IF NOT EXISTS idx_events_organizer_id ON public.events(organizer_id);
CREATE INDEX IF NOT EXISTS idx_tickets_event_id ON public.tickets(event_id);
CREATE INDEX IF NOT EXISTS idx_tickets_user_id ON public.tickets(user_id);

-- =====================================================
-- SETUP COMPLETE
-- =====================================================
