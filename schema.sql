-- 1. Create Profiles Table
-- This table stores public user data.
CREATE TABLE public.profiles (
    id uuid NOT NULL PRIMARY KEY REFERENCES auth.users(id) ON DELETE CASCADE,
    first_name text,
    last_name text,
    avatar_url text,
    email text UNIQUE
);
ALTER TABLE public.profiles ENABLE ROW LEVEL SECURITY;
CREATE POLICY "Public profiles are viewable by everyone." ON public.profiles FOR SELECT USING (true);
CREATE POLICY "Users can insert their own profile." ON public.profiles FOR INSERT WITH CHECK (auth.uid() = id);
CREATE POLICY "Users can update their own profile." ON public.profiles FOR UPDATE USING (auth.uid() = id);

-- 2. Create Events Table
-- This table stores all event information.
CREATE TABLE public.events (
    id bigint GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    created_at timestamp with time zone DEFAULT now(),
    title text NOT NULL,
    description text,
    date timestamp with time zone NOT NULL,
    end_date timestamp with time zone,
    location text,
    cover_image text,
    organizer_id uuid REFERENCES public.profiles(id) ON DELETE SET NULL,
    capacity integer,
    is_paid boolean DEFAULT false,
    price numeric,
    is_public boolean DEFAULT true NOT NULL
);
ALTER TABLE public.events ENABLE ROW LEVEL SECURITY;
CREATE POLICY "Public events are viewable by everyone." ON public.events FOR SELECT USING (is_public = true);
CREATE POLICY "Organizers can view their own private events." ON public.events FOR SELECT USING (auth.uid() = organizer_id);
CREATE POLICY "Organizers can insert events." ON public.events FOR INSERT WITH CHECK (auth.uid() = organizer_id);
CREATE POLICY "Organizers can update their own events." ON public.events FOR UPDATE USING (auth.uid() = organizer_id);
CREATE POLICY "Organizers can delete their own events." ON public.events FOR DELETE USING (auth.uid() = organizer_id);

-- 3. Create Tickets Table
-- This table links users (attendees) to events.
CREATE TABLE public.tickets (
    id bigint GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    created_at timestamp with time zone DEFAULT now(),
    event_id bigint REFERENCES public.events(id) ON DELETE CASCADE,
    user_id uuid REFERENCES public.profiles(id) ON DELETE CASCADE,
    qr_token uuid DEFAULT gen_random_uuid() NOT NULL UNIQUE,
    checked_in boolean DEFAULT false NOT NULL,
    checked_in_at timestamp with time zone,
    checked_out boolean DEFAULT false NOT NULL,
    checked_out_at timestamp with time zone,
    UNIQUE(event_id, user_id)
);
ALTER TABLE public.tickets ENABLE ROW LEVEL SECURITY;
CREATE POLICY "Users can view their own tickets." ON public.tickets FOR SELECT USING (auth.uid() = user_id);
CREATE POLICY "Organizers can view tickets for their events." ON public.tickets FOR SELECT USING (
    (SELECT organizer_id FROM public.events WHERE id = event_id) = auth.uid()
);
CREATE POLICY "Users can create their own tickets." ON public.tickets FOR INSERT WITH CHECK (auth.uid() = user_id);
CREATE POLICY "Users can delete their own tickets (unregister)." ON public.tickets FOR DELETE USING (auth.uid() = user_id);
CREATE POLICY "Organizers can update tickets for their events (check-in)." ON public.tickets FOR UPDATE USING (
    (SELECT organizer_id FROM public.events WHERE id = event_id) = auth.uid()
);

-- 4. Create Event Scanners Table
-- This table links users to events they are allowed to scan.
CREATE TABLE public.event_scanners (
    id bigint GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    event_id bigint NOT NULL REFERENCES public.events(id) ON DELETE CASCADE,
    user_id uuid NOT NULL REFERENCES public.profiles(id) ON DELETE CASCADE,
    UNIQUE(event_id, user_id)
);
ALTER TABLE public.event_scanners ENABLE ROW LEVEL SECURITY;
CREATE POLICY "Organizers can manage scanners for their events." ON public.event_scanners FOR ALL USING (
    (SELECT organizer_id FROM public.events WHERE id = event_id) = auth.uid()
);
CREATE POLICY "Scanners can view their own assignments." ON public.event_scanners FOR SELECT USING (auth.uid() = user_id);

-- 5. Create Database Functions
-- Function to populate the profiles table on new user signup
CREATE OR REPLACE FUNCTION public.handle_new_user()
RETURNS trigger
LANGUAGE plpgsql
SECURITY DEFINER SET search_path = public
AS $$
BEGIN
  INSERT INTO public.profiles (id, first_name, last_name, email)
  VALUES (
    new.id,
    new.raw_user_meta_data->>'first_name',
    new.raw_user_meta_data->>'last_name',
    new.email
  );
  RETURN new;
END;
$$;

-- Trigger to call the function on new user signup
CREATE TRIGGER on_auth_user_created
  AFTER INSERT ON auth.users
  FOR EACH ROW EXECUTE PROCEDURE public.handle_new_user();

-- Function to securely get event attendees for an organizer
CREATE OR REPLACE FUNCTION public.get_attendees_for_event(event_id_param int)
RETURNS TABLE(ticket_id bigint, checked_in bool, checked_out bool, first_name text, last_name text, email text)
LANGUAGE plpgsql
SECURITY DEFINER SET search_path = public
AS $$
BEGIN
  IF (
    (SELECT organizer_id FROM public.events WHERE id = event_id_param) = auth.uid()
  ) THEN
    RETURN QUERY
    SELECT t.id, t.checked_in, t.checked_out, p.first_name, p.last_name, p.email
    FROM public.tickets t
    JOIN public.profiles p ON t.user_id = p.id
    WHERE t.event_id = event_id_param;
  END IF;
END;
$$;

-- Function to count total registered users
CREATE OR REPLACE FUNCTION public.count_users()
RETURNS int
LANGUAGE plpgsql
AS $$
BEGIN
  RETURN (SELECT count(*) FROM auth.users);
END;
$$;
