-- Create a table for public user profiles
DROP TABLE IF EXISTS public.event_scanners CASCADE;
DROP TABLE IF EXISTS public.tickets CASCADE;
DROP TABLE IF EXISTS public.events CASCADE;
DROP TABLE IF EXISTS public.profiles CASCADE;
DROP FUNCTION IF EXISTS public.handle_new_user();
DROP FUNCTION IF EXISTS public.count_users();
DROP FUNCTION IF EXISTS public.delete_ticket(bigint, uuid);

CREATE TABLE public.profiles (
  id UUID PRIMARY KEY REFERENCES auth.users(id) ON DELETE CASCADE,
  first_name TEXT,
  last_name TEXT,
  avatar_url TEXT
);
ALTER TABLE public.profiles ENABLE ROW LEVEL SECURITY;
CREATE POLICY "Public profiles are viewable by everyone." ON public.profiles FOR SELECT USING (true);
CREATE POLICY "Users can insert their own profile." ON public.profiles FOR INSERT WITH CHECK (auth.uid() = id);
CREATE POLICY "Users can update their own profile." ON public.profiles FOR UPDATE USING (auth.uid() = id);

-- Function to create a profile when a new user signs up
CREATE OR REPLACE FUNCTION public.handle_new_user()
RETURNS TRIGGER AS $$
BEGIN
  INSERT INTO public.profiles (id, first_name, last_name)
  VALUES (new.id, new.raw_user_meta_data->>'first_name', new.raw_user_meta_data->>'last_name');
  RETURN new;
END;
$$ LANGUAGE plpgsql SECURITY DEFINER;

-- Trigger to call the function on new user creation
CREATE TRIGGER on_auth_user_created
  AFTER INSERT ON auth.users
  FOR EACH ROW EXECUTE PROCEDURE public.handle_new_user();

-- Create the Events table
CREATE TABLE public.events (
  id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  title TEXT NOT NULL,
  description TEXT,
  date TIMESTAMPTZ NOT NULL,
  end_date TIMESTAMPTZ,
  location TEXT,
  capacity INT,
  cover_image TEXT,
  organizer_id UUID REFERENCES auth.users(id) ON DELETE CASCADE,
  created_at TIMESTAMPTZ DEFAULT NOW(),
  is_paid BOOLEAN DEFAULT false,
  price NUMERIC(10, 2)
);
ALTER TABLE public.events ENABLE ROW LEVEL SECURITY;
CREATE POLICY "Events are public." ON public.events FOR SELECT USING (true);
CREATE POLICY "Organizers can create events." ON public.events FOR INSERT WITH CHECK (auth.uid() = organizer_id);
CREATE POLICY "Organizers can update their own events." ON public.events FOR UPDATE USING (auth.uid() = organizer_id);

-- Create the Tickets table
CREATE TABLE public.tickets (
  id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  event_id BIGINT REFERENCES public.events(id) ON DELETE CASCADE,
  user_id UUID REFERENCES auth.users(id) ON DELETE CASCADE,
  qr_code_token TEXT UNIQUE,
  checked_in BOOLEAN DEFAULT false,
  checked_in_at TIMESTAMPTZ,
  created_at TIMESTAMPTZ DEFAULT NOW(),
  UNIQUE(event_id, user_id)
);
ALTER TABLE public.tickets ENABLE ROW LEVEL SECURITY;
CREATE POLICY "Users can view their own tickets." ON public.tickets FOR SELECT USING (auth.uid() = user_id);
CREATE POLICY "Organizers can view tickets for their events." ON public.tickets FOR SELECT USING ((EXISTS (SELECT 1 FROM events WHERE events.id = tickets.event_id AND events.organizer_id = auth.uid())));
CREATE POLICY "Users can create tickets for themselves." ON public.tickets FOR INSERT WITH CHECK (auth.uid() = user_id);
CREATE POLICY "Organizers can update tickets for their events (check-in)." ON public.tickets FOR UPDATE USING ((EXISTS (SELECT 1 FROM events WHERE events.id = tickets.event_id AND events.organizer_id = auth.uid())));

-- Create the Event Scanners join table
CREATE TABLE public.event_scanners (
  id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  event_id BIGINT NOT NULL REFERENCES public.events(id) ON DELETE CASCADE,
  user_id UUID NOT NULL REFERENCES auth.users(id) ON DELETE CASCADE,
  CONSTRAINT unique_event_scanner UNIQUE (event_id, user_id)
);
ALTER TABLE public.event_scanners ENABLE ROW LEVEL SECURITY;
CREATE POLICY "Scanners can be managed by event organizers." ON public.event_scanners FOR ALL USING ((SELECT organizer_id FROM public.events WHERE id = event_id) = auth.uid());

-- Function to count users for stats
CREATE OR REPLACE FUNCTION count_users()
RETURNS integer AS $$
DECLARE
  user_count integer;
BEGIN
  SELECT count(*) INTO user_count FROM auth.users;
  RETURN user_count;
END;
$$ LANGUAGE plpgsql SECURITY DEFINER;


-- Function to securely delete a ticket
CREATE OR REPLACE FUNCTION delete_ticket(p_ticket_id BIGINT, p_user_id UUID)
RETURNS void AS $$
BEGIN
  DELETE FROM public.tickets
  WHERE id = p_ticket_id AND user_id = p_user_id;
END;
$$ LANGUAGE plpgsql SECURITY DEFINER;
